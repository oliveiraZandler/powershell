	#Configurações para gerar Backup
    $serverName = "GROUP-NOTE0002\SQLEXPRESS"
    $backupDirectory = "E:\Banco"
    $daysToStoreBackups = 7
	
		
###########################################################
#Metodo para gerar backup

[System.Reflection.Assembly]::LoadWithPartialName("Microsoft.SqlServer.SMO") | Out-Null
[System.Reflection.Assembly]::LoadWithPartialName("Microsoft.SqlServer.SmoExtended") | Out-Null
[System.Reflection.Assembly]::LoadWithPartialName("Microsoft.SqlServer.ConnectionInfo") | Out-Null
[System.Reflection.Assembly]::LoadWithPartialName("Microsoft.SqlServer.SmoEnum") | Out-Null
 
$server = New-Object ("Microsoft.SqlServer.Management.Smo.Server") $serverName
$dbs = $server.Databases
$dbs = 
foreach ($database in $dbs | where { $_.IsSystemObject -eq $False })
{
	
	$dbName = $database.Name
	
 if ($dbName -NE 'tempdb' -and $dbName -NE 'model'`
		$dbName -NE 'master' -and $dbName -NE 'msbd'`
		$dbName -NE 'ReportServer$SQLEXPRESS' $dbName -NE 'ReportServer$SQLEXPRESSTempDB'){
		
    $timestamp = Get-Date -format ddMMyyyy
    $targetPath = $backupDirectory + "\" + $dbName + "_FULL_" + $timestamp + ".bak"
 
    $smoBackup = New-Object ("Microsoft.SqlServer.Management.Smo.Backup")
    $smoBackup.Action = "Database"
    $smoBackup.BackupSetDescription = "Backup FULL de " + $dbName
    $smoBackup.BackupSetName = $dbName + " Backup"
    $smoBackup.Database = $dbName
    $smoBackup.MediaDescription = "Disk"
    $smoBackup.Devices.AddDevice($targetPath, "File")
    $smoBackup.SqlBackup($server)
	}
#    "Realizado o Backup de $dbName ($serverName) em $targetPath na data de $timestamp"
}
 
Get-ChildItem "$backupDirectory\*.bak" |? { $_.lastwritetime -le (Get-Date).AddDays(-$daysToStoreBackups)} |% {Remove-Item $_ -force }
"removed all previous backups older than $daysToStoreBackups days"

################################################################### 
#		Método para Criar relatorio da realizaçao do backup
 
$ServerList = "GROUP-NOTE0002\SQLEXPRESS" 
$OutputFile = "E:\Banco\Output.htm" 
 
$HTML = '<style type="text/css"> 
    #Header{font-family:"Trebuchet MS", Arial, Helvetica, sans-serif;width:100%;border-collapse:collapse;} 
    #Header td, #Header th {font-size:14px;border:1px solid #98bf21;padding:3px 7px 2px 7px;} 
    #Header th {font-size:14px;text-align:left;padding-top:5px;padding-bottom:4px;background-color:#A7C942;color:#fff;} 
    #Header tr.alt td {color:#000;background-color:#EAF2D3;} 
    </Style>' 
     
$HTML += "<HTML><BODY><Table border=1 cellpadding=0 cellspacing=0 width=100% id=Header> 
        <TR> 
            <TH><B>Nome de Banco</B></TH> 
            <TH><B>Tipo do Backup</B></TD> 
            <TH><B>Data do ultimo Backup Full</B></TH> 
            <TH><B>Data do ultimo backup Diferencial</B></TH> 
        </TR>" 
 
[System.Reflection.Assembly]::LoadWithPartialName('Microsoft.SqlServer.SMO') | out-null 
ForEach ($ServerName in $ServerList) 
{ 
    $HTML += "<TR bgColor='#ccff66'><TD colspan=5 align=center><B>$ServerName</B></TD></TR>" 
     
    $SQLServer = New-Object ('Microsoft.SqlServer.Management.Smo.Server') $ServerName  
    Foreach($Database in $SQLServer.Databases) 
    { 
        $HTML += "<TR> 
                    <TD>$($Database.Name)</TD> 
                    <TD>$($Database.RecoveryModel)</TD> 
                    <TD>$($Database.LastBackupDate)</TD> 
                    <TD>$($Database.LastDifferentialBackupDate)</TD> 
                 </TR>" 
    } 
} 
 
$HTML += "</Table></BODY></HTML>" 
$HTML | Out-File $OutputFile 


# # # # # 
# FUNÇÃO PARA ENVIAR EMAIL
# # # # #

$SMTPServer = "smtp.office365.com"
$SMTPPort = "587"
$Username = "eg.zandler@groupsoftware.com.br"
$Password = "6Roup@@@"

$to = "eg.zandler@groupsoftware.com.br"
$subject = "Relatorio de execucao de processo"
$body = get-content ("E:\Banco\Output.htm")

$message = New-Object System.Net.Mail.MailMessage
$message.subject = $subject
$message.body = $body
$message.to.add($to)
$message.IsBodyHtml = $true
$message.from = $username
$message.attachments.add($attachment)

$smtp = New-Object System.Net.Mail.SmtpClient($SMTPServer, $SMTPPort);
$smtp.EnableSSL = $true
$smtp.Credentials = New-Object System.Net.NetworkCredential($Username, $Password);
$smtp.send($message)
